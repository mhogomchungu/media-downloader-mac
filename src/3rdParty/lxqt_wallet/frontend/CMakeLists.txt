if(${CMAKE_VERSION} VERSION_GREATER "3.26")
    cmake_minimum_required(VERSION 3.5.0)
else()
    cmake_minimum_required(VERSION 3.0.0)
endif()

INCLUDE(FindPkgConfig)

include_directories(${PROJECT_BINARY_DIR}/frontend)
include_directories(${PROJECT_BINARY_DIR}/backend)
include_directories(${PROJECT_BINARY_DIR})

include_directories(${CMAKE_BINARY_DIR})

if(APPLE)
    file( WRITE ${PROJECT_BINARY_DIR}/osx_keychain.h "#define OSX_KEYCHAIN 1" )
else()
    file( WRITE ${PROJECT_BINARY_DIR}/osx_keychain.h "#define OSX_KEYCHAIN 0" )
endif()

set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(BUILD_WITH_QT6)
    include_directories(${Qt6Widgets_INCLUDE_DIRS})
    include_directories(${Qt6Core_INCLUDE_DIRS}})
    include_directories(${Qt6DBus_INCLUDE_DIRS}})

    add_definitions(${Qt6Widgets_DEFINITIONS})
    add_definitions(${Qt6Core_DEFINITIONS})
else()
    include_directories(${Qt5Widgets_INCLUDE_DIRS})
    include_directories(${Qt5Core_INCLUDE_DIRS}})
    include_directories(${Qt5DBus_INCLUDE_DIRS}})

    add_definitions(${Qt5Widgets_DEFINITIONS})
    add_definitions(${Qt5Core_DEFINITIONS})
endif()

if(NOSECRETSUPPORT)
    SET(SECRET_SUPPORT "false")
    file(WRITE ${PROJECT_BINARY_DIR}/storage_manager.h "\n#define HAS_SECRET_SUPPORT 0\n")
else()
    pkg_check_modules(LIBSECRET libsecret-1 QUIET)
    if(LIBSECRET_FOUND)
        add_subdirectory(libsecret)
        SET(SECRET_SUPPORT "true")
        file(WRITE ${PROJECT_BINARY_DIR}/storage_manager.h "\n#define HAS_SECRET_SUPPORT 1\n")
    else()
        SET(SECRET_SUPPORT "false")
        file(WRITE ${PROJECT_BINARY_DIR}/storage_manager.h "\n#define HAS_SECRET_SUPPORT 0\n")
    endif()
endif()

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 10.0.0 )
	set( CMAKE_CXX_STANDARD 14 )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang"  AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 10.0.0)
	set( CMAKE_CXX_STANDARD 14 )
else()
	set( CMAKE_CXX_STANDARD 14 )
                if(${CMAKE_VERSION} VERSION_LESS "3.1.0")
                        message("Warning your cmake version is too old(<3.1.0) and code my not compile")
                        add_definitions(-std=c++14)
                endif()
endif()

set( CMAKE_CXX_STANDARD_REQUIRED ON )
set( CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

if(NOKDESUPPORT)
    SET(KWALLET_SUPPORT "false")
    file(APPEND  ${PROJECT_BINARY_DIR}/storage_manager.h "\n#define HAS_KWALLET_SUPPORT 0\n")
else()
    message(STATUS "Checking for modules 'KF5Wallet'")
    find_package(KF5Wallet QUIET)
    if(KF5Wallet_FOUND )
        message(STATUS "  Found KF5Wallet, version ${KF5Wallet_VERSION}")
        file(APPEND  ${PROJECT_BINARY_DIR}/storage_manager.h "\n#define HAS_KWALLET_SUPPORT 1\n")
        SET(KWALLET_SUPPORT "true")
    else()
        file(APPEND  ${PROJECT_BINARY_DIR}/storage_manager.h "\n#define HAS_KWALLET_SUPPORT 0\n")
        SET(KWALLET_SUPPORT "false")
    endif()
endif()

if(KWALLET_SUPPORT)
    message(STATUS "\n--------------------------------------------------------------------------")
    message(STATUS "kwallet support found,will build kwallet functionality")
    message(STATUS "-----------------------------------------------------------------------")
else()
    message(STATUS "\n--------------------------------------------------------------------------")
    message(STATUS "kwallet support NOT found, support will be discovered at runtime through dbus")
    message(STATUS "-----------------------------------------------------------------------")
endif()

if(SECRET_SUPPORT)
    message(STATUS "\n--------------------------------------------------------------------------")
    message(STATUS "libsecret support found,will build libsecret functionality")
    message(STATUS "-----------------------------------------------------------------------")
else()
    message(STATUS "\n--------------------------------------------------------------------------")
    message(STATUS "libsecret support NOT found,will not build libsecret functionality")
    message(STATUS "-----------------------------------------------------------------------")
endif()

set(COMMON_UI_FILES  changepassworddialog.ui password_dialog.ui)
set(COMMON_MOC_FILES task.h changepassworddialog.h password_dialog.h)
set(COMMON_SRC_FILES changepassworddialog.cpp password_dialog.cpp lxqt_windows_dpapi.cpp lxqt_internal_wallet.cpp lxqt_wallet.cpp lxqt_osx_keychain.cpp)

if(KWALLET_SUPPORT)
    set(MOC_KWALLET lxqt_kwallet.h)
    set(KWALLET_COMMON lxqt_kwallet.cpp)
    if(SECRET_SUPPORT)
	add_library(lxqt-wallet STATIC ${KWALLET_COMMON} lxqt_libsecret.cpp ${COMMON_UI_FILES} ${COMMON_SRC_FILES} ${COMMON_MOC_FILES} ${MOC_KWALLET})
	target_link_libraries(lxqt-wallet secretlib)
    else()
	add_library(lxqt-wallet STATIC ${KWALLET_COMMON} ${COMMON_UI_FILES} ${COMMON_SRC_FILES} ${COMMON_MOC_FILES} ${MOC_KWALLET})
    endif()
    target_link_libraries(lxqt-wallet KF5::Wallet)
else()
    set(MOC_KWALLET_DBUS lxqt_kwallet-dbus.h)
    set(KWALLET_DBUS lxqt_kwallet-dbus.cpp)
    if(SECRET_SUPPORT)
	add_library(lxqt-wallet STATIC lxqt_libsecret.cpp ${KWALLET_DBUS} ${COMMON_UI_FILES} ${COMMON_SRC_FILES} ${COMMON_MOC_FILES} ${MOC_KWALLET_DBUS})
	target_link_libraries(lxqt-wallet secretlib)
    else()
	add_library(lxqt-wallet STATIC ${COMMON_UI_FILES} ${COMMON_SRC_FILES} ${KWALLET_DBUS} ${COMMON_MOC_FILES}${MOC_KWALLET_DBUS})
    endif()
endif()

target_link_libraries(lxqt-wallet lxqtwallet-backend)

if(BUILD_WITH_QT6)
    target_link_libraries(lxqt-wallet ${Qt6Widgets_LIBRARIES})
    target_link_libraries(lxqt-wallet ${Qt6Core_LIBRARIES})
else()
    target_link_libraries(lxqt-wallet ${Qt5Widgets_LIBRARIES})
    target_link_libraries(lxqt-wallet ${Qt5Core_LIBRARIES})
endif()

if(WIN32)
    target_link_libraries(lxqt-wallet -lcrypt32 -lbcrypt)
else()
    target_link_libraries(lxqt-wallet ${Qt5DBus_LIBRARIES})
endif()

if(APPLE)
    find_library(COREFOUNDATION_LIBRARY CoreFoundation REQUIRED)
    find_library(SECURITY_LIBRARY Security REQUIRED)
    target_link_libraries(lxqt-wallet ${COREFOUNDATION_LIBRARY} ${SECURITY_LIBRARY})
endif()

set_target_properties(lxqt-wallet PROPERTIES COMPILE_FLAGS "-Wextra -Wall -s -fPIC -pedantic ")
set_target_properties(lxqt-wallet PROPERTIES SOVERSION "${LIBRARY_VERSION}")

file(WRITE ${PROJECT_BINARY_DIR}/translations_path.h
"
#define TRANSLATIONS_PATH \"${CMAKE_INSTALL_PREFIX}/share/lxqt/translations/lxqt-wallet/\"
")

SET(TRANSLATIONS
   ../translations/lxqt-wallet_nl_NL.ts
   ../translations/lxqt-wallet_fr_FR.ts
   ../translations/lxqt-wallet_de_DE.ts
   ../translations/lxqt-wallet_gr_GR.ts
   ../translations/lxqt-wallet_es_ES.ts
   ../translations/lxqt-wallet_pl_PL.ts
)
